// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"ntq.project/project.test/models"
)

// PutUserOKCode is the HTTP code returned for type PutUserOK
const PutUserOKCode int = 200

/*PutUserOK OK

swagger:response putUserOK
*/
type PutUserOK struct {

	/*
	  In: Body
	*/
	Payload []*models.CommonUser `json:"body,omitempty"`
}

// NewPutUserOK creates PutUserOK with default headers values
func NewPutUserOK() *PutUserOK {

	return &PutUserOK{}
}

// WithPayload adds the payload to the put user o k response
func (o *PutUserOK) WithPayload(payload []*models.CommonUser) *PutUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user o k response
func (o *PutUserOK) SetPayload(payload []*models.CommonUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.CommonUser, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutUserBadRequestCode is the HTTP code returned for type PutUserBadRequest
const PutUserBadRequestCode int = 400

/*PutUserBadRequest Bad Request

swagger:response putUserBadRequest
*/
type PutUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResult `json:"body,omitempty"`
}

// NewPutUserBadRequest creates PutUserBadRequest with default headers values
func NewPutUserBadRequest() *PutUserBadRequest {

	return &PutUserBadRequest{}
}

// WithPayload adds the payload to the put user bad request response
func (o *PutUserBadRequest) WithPayload(payload *models.ErrorResult) *PutUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user bad request response
func (o *PutUserBadRequest) SetPayload(payload *models.ErrorResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
